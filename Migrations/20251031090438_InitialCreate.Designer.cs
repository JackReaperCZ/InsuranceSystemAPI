// <auto-generated />
using System;
using InsuranceSystemAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InsuranceSystemAPI.Migrations
{
    [DbContext(typeof(InsuranceDbContext))]
    [Migration("20251031090438_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("InsuranceSystemAPI.Models.ClaimFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("FileCategory")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("InsuranceClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceClaimId");

                    b.ToTable("ClaimFiles");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.ContractFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("InsuranceContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceContractId");

                    b.ToTable("ContractFiles");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.GdprAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Akce")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("akce");

                    b.Property<DateTime>("DatumCas")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("datum_cas");

                    b.Property<string>("Detaily")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("detaily");

                    b.Property<string>("IpAdresa")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_adresa");

                    b.Property<int>("PojistenecId")
                        .HasColumnType("int")
                        .HasColumnName("pojistenec_id");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("user_agent");

                    b.Property<int>("UzivatelId")
                        .HasColumnType("int")
                        .HasColumnName("uzivatel_id");

                    b.HasKey("Id");

                    b.HasIndex("UzivatelId");

                    b.HasIndex("PojistenecId", "DatumCas");

                    b.ToTable("gdpr_audit_logs");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.GdprConsent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DatumOdvolani")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("datum_odvolani");

                    b.Property<DateTime>("DatumUdeleni")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("datum_udeleni");

                    b.Property<string>("DuvodOdvolani")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("duvod_odvolani");

                    b.Property<string>("IpAdresa")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_adresa");

                    b.Property<bool>("JeAktivni")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("je_aktivni");

                    b.Property<int>("Kategorie")
                        .HasColumnType("int")
                        .HasColumnName("kategorie");

                    b.Property<int?>("OdvolanoKym")
                        .HasColumnType("int")
                        .HasColumnName("odvolano_kym");

                    b.Property<int>("PojistenecId")
                        .HasColumnType("int")
                        .HasColumnName("pojistenec_id");

                    b.Property<string>("Ucel")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ucel");

                    b.Property<int>("UdelenoKym")
                        .HasColumnType("int")
                        .HasColumnName("udeljen_kym");

                    b.Property<string>("VerzePodminek")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("verze_podminek");

                    b.HasKey("Id");

                    b.HasIndex("OdvolanoKym");

                    b.HasIndex("UdelenoKym");

                    b.HasIndex("PojistenecId", "Kategorie", "JeAktivni");

                    b.ToTable("gdpr_consents");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.InsuranceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdjusterId")
                        .HasColumnType("int");

                    b.Property<string>("AdjusterNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("ClaimNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("CompensationAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DamageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DamageDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal?>("EstimatedDamage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("IncidentDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IncidentLocation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("InsuranceCompanyNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("InsuranceContractId")
                        .HasColumnType("int");

                    b.Property<int?>("InsuredPersonId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MonetaryReserve")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ReporterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Witnesses")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AdjusterId");

                    b.HasIndex("InsuranceContractId");

                    b.HasIndex("InsuredPersonId");

                    b.HasIndex("ReporterId");

                    b.ToTable("InsuranceClaims");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.InsuranceContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AnnualPremium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("InsuranceLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InsuranceType")
                        .HasColumnType("int");

                    b.Property<decimal>("InsuredAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InsuredPersonId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ContractNumber")
                        .IsUnique();

                    b.HasIndex("InsuredPersonId");

                    b.HasIndex("ManagerId");

                    b.ToTable("InsuranceContracts");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.InsuredPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IdCardNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NationalId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IdCardNumber")
                        .IsUnique()
                        .HasFilter("[IdCardNumber] IS NOT NULL");

                    b.HasIndex("NationalId")
                        .IsUnique()
                        .HasFilter("[NationalId] IS NOT NULL");

                    b.ToTable("InsuredPersons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Hlavní 123, Praha 1",
                            CreatedAt = new DateTime(2025, 10, 31, 9, 4, 37, 506, DateTimeKind.Utc).AddTicks(5230),
                            DateOfBirth = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jan.novak@email.cz",
                            FirstName = "Jan",
                            IsActive = true,
                            LastName = "Novák",
                            NationalId = "8005150123",
                            Phone = "+420123456789"
                        });
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 31, 9, 4, 37, 505, DateTimeKind.Utc).AddTicks(5847),
                            Email = "admin@insurance.cz",
                            FirstName = "Administrátor",
                            HashedPassword = "$2a$11$H18CBw/yGwhGAQUOx.pU/eBC./bP2M.xqa/ru/42FTA2Euum5L7Le",
                            IsActive = true,
                            LastName = "Systému",
                            Role = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.ClaimFile", b =>
                {
                    b.HasOne("InsuranceSystemAPI.Models.InsuranceClaim", "InsuranceClaim")
                        .WithMany("AttachedFiles")
                        .HasForeignKey("InsuranceClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsuranceClaim");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.ContractFile", b =>
                {
                    b.HasOne("InsuranceSystemAPI.Models.InsuranceContract", "InsuranceContract")
                        .WithMany("AttachedFiles")
                        .HasForeignKey("InsuranceContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsuranceContract");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.GdprAuditLog", b =>
                {
                    b.HasOne("InsuranceSystemAPI.Models.InsuredPerson", "Pojistenec")
                        .WithMany()
                        .HasForeignKey("PojistenecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceSystemAPI.Models.User", "Uzivatel")
                        .WithMany()
                        .HasForeignKey("UzivatelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pojistenec");

                    b.Navigation("Uzivatel");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.GdprConsent", b =>
                {
                    b.HasOne("InsuranceSystemAPI.Models.User", "OdvolalUzivatel")
                        .WithMany()
                        .HasForeignKey("OdvolanoKym")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceSystemAPI.Models.InsuredPerson", "Pojistenec")
                        .WithMany()
                        .HasForeignKey("PojistenecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceSystemAPI.Models.User", "UdelilUzivatel")
                        .WithMany()
                        .HasForeignKey("UdelenoKym")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OdvolalUzivatel");

                    b.Navigation("Pojistenec");

                    b.Navigation("UdelilUzivatel");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.InsuranceClaim", b =>
                {
                    b.HasOne("InsuranceSystemAPI.Models.User", "Adjuster")
                        .WithMany("ProcessedClaims")
                        .HasForeignKey("AdjusterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("InsuranceSystemAPI.Models.InsuranceContract", "InsuranceContract")
                        .WithMany("InsuranceClaims")
                        .HasForeignKey("InsuranceContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceSystemAPI.Models.InsuredPerson", null)
                        .WithMany("InsuranceClaims")
                        .HasForeignKey("InsuredPersonId");

                    b.HasOne("InsuranceSystemAPI.Models.User", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Adjuster");

                    b.Navigation("InsuranceContract");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.InsuranceContract", b =>
                {
                    b.HasOne("InsuranceSystemAPI.Models.InsuredPerson", "InsuredPerson")
                        .WithMany("InsuranceContracts")
                        .HasForeignKey("InsuredPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceSystemAPI.Models.User", "Manager")
                        .WithMany("ManagedContracts")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InsuredPerson");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.InsuranceClaim", b =>
                {
                    b.Navigation("AttachedFiles");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.InsuranceContract", b =>
                {
                    b.Navigation("AttachedFiles");

                    b.Navigation("InsuranceClaims");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.InsuredPerson", b =>
                {
                    b.Navigation("InsuranceClaims");

                    b.Navigation("InsuranceContracts");
                });

            modelBuilder.Entity("InsuranceSystemAPI.Models.User", b =>
                {
                    b.Navigation("ManagedContracts");

                    b.Navigation("ProcessedClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
